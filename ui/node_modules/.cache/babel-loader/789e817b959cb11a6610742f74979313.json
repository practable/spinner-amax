{"remainingRequest":"/home/david/practable/spinner-amax/ui/node_modules/babel-loader/lib/index.js!/home/david/practable/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/david/practable/spinner-amax/ui/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/david/practable/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/david/practable/spinner-amax/ui/src/components/AnalogueOutput.vue?vue&type=template&id=43493651&scoped=true","dependencies":[{"path":"/home/david/practable/spinner-amax/ui/src/components/AnalogueOutput.vue","mtime":1653472124341},{"path":"/home/david/practable/spinner-amax/ui/babel.config.js","mtime":1653472124337},{"path":"/home/david/practable/spinner-amax/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/practable/spinner-amax/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/david/practable/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/david/practable/spinner-amax/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/practable/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tICJ2dWUiOwoKdmFyIF93aXRoU2NvcGVJZCA9IGZ1bmN0aW9uIF93aXRoU2NvcGVJZChuKSB7CiAgcmV0dXJuIF9wdXNoU2NvcGVJZCgiZGF0YS12LTQzNDkzNjUxIiksIG4gPSBuKCksIF9wb3BTY29wZUlkKCksIG47Cn07Cgp2YXIgX2hvaXN0ZWRfMSA9IHsKICBpZDogIm91dHB1dCIKfTsKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJjYW52YXMiLCBfaG9pc3RlZF8xKTsKfQ=="},{"version":3,"sources":["/home/david/practable/spinner-amax/ui/src/components/AnalogueOutput.vue"],"names":[],"mappings":";;;;;;;AAKY,EAAA,EAAE,EAAC;;;uBAAX,mBAAA,CAA6B,QAA7B,EAAA,UAAA,C","sourcesContent":["//Vue3 update\n//Orthogonal\n\n<template>\n\n    <canvas id='output'></canvas>\n\n</template>\n\n<script>\n\nexport default {\n\n  name: 'AnalogueOutput',\n  props: {\n      outputValue: String,\n      minValue: Number,\n      maxValue: Number,\n      intervalValue: Number,\n      minorIntervalValue: Number,\n  },\n  data () {\n    return {\n        canvas: null,\n        ctx: null,\n        arm: 0,         \n    }\n  },\n  created(){\n      \n  },\n  beforeMount(){\n\n  },\n  mounted(){\n      this.canvas = document.getElementById('output');\n      this.ctx = this.canvas.getContext('2d');\n      this.drawDial();\n      this.drawTicks();\n      this.drawMinorTicks();\n      this.drawArm();\n\n  },\n  components: {\n    \n  },\n  computed:{\n     armValue(){\n         let value = this.outputValue;\n         if(isNaN(Number(value))){\n              return 0;\n          } else{\n              return Number(value);\n          }\n     }\n  },\n  watch:{\n      armValue(){\n          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);  \n          if(isNaN(Number(this.outputValue))){\n              this.arm = 0;\n          } else{\n              this.arm = Math.abs(Number(this.outputValue));\n          }\n          this.drawDial();\n          this.drawTicks();\n          this.drawMinorTicks();\n          this.drawArm();\n      }\n  },\n  methods: {\n      drawArm(){\n        let angle = Math.PI/2 + 2*Math.PI*this.arm/this.maxValue;\n        this.ctx.lineWidth = 4;              // HAND WIDTH.\n\n        this.ctx.beginPath();\n        // START FROM CENTER OF THE CLOCK.\n        this.ctx.moveTo(this.canvas.width / 2, this.canvas.height / 2);   \n        // DRAW THE LENGTH.\n        this.ctx.lineTo((this.canvas.width / 2 + Math.cos(angle) * this.canvas.height/2),\n            this.canvas.height / 2 + Math.sin(angle) * this.canvas.height/2);\n\n\n        this.ctx.strokeStyle = '#586A73';        // COLOR OF THE HAND.\n        this.ctx.stroke();\n      },\n      drawDial(){\n        this.ctx.beginPath();\n        this.ctx.arc(this.canvas.width / 2, this.canvas.height / 2, this.canvas.height/2 - 5, 0, Math.PI * 2);\n        this.ctx.lineWidth = 3;\n        this.ctx.fillStyle = 'rgba(50, 50, 50, 0.1)';\n        this.ctx.strokeStyle = '#92949C';\n        this.ctx.stroke();\n        this.ctx.fill();\n        \n\n        this.ctx.beginPath();\n        this.ctx.arc(this.canvas.width / 2, this.canvas.height / 2, this.canvas.height/2, 0, Math.PI * 2);\n        this.ctx.lineWidth = 3;\n        this.ctx.strokeStyle = '#92949C';\n        this.ctx.stroke();\n        \n\n        this.ctx.beginPath();\n        this.ctx.arc(this.canvas.width / 2, this.canvas.height / 2, 5, 0, Math.PI * 2);\n        this.ctx.lineWidth = 3;\n        this.ctx.fillStyle = '#353535';\n        this.ctx.strokeStyle = '#0C3D4A';\n        this.ctx.stroke();\n        this.ctx.fill();\n      },\n      drawTicks(){\n          let num_ticks = (this.maxValue - this.minValue)/this.intervalValue;\n          let angle = Math.PI/2;\n          for (let i = 0; i < num_ticks; i++) {\n            angle = i*2*Math.PI/num_ticks + Math.PI/2;       // THE ANGLE TO MARK.\n            this.ctx.lineWidth = 2;            // HAND WIDTH.\n            this.ctx.beginPath();\n\n            var x1 = (this.canvas.width / 2) + Math.cos(angle) * (this.canvas.height/2);\n            var y1 = (this.canvas.height / 2) + Math.sin(angle) * (this.canvas.height/2);\n            var x2 = (this.canvas.width / 2) + Math.cos(angle) * (this.canvas.height/2 - (this.canvas.height/2 / 4));\n            var y2 = (this.canvas.height / 2) + Math.sin(angle) * (this.canvas.height/2 - (this.canvas.height/2 / 4));\n\n            this.ctx.moveTo(x1, y1);\n            this.ctx.lineTo(x2, y2);\n\n            this.ctx.strokeStyle = '#466B76';\n            this.ctx.stroke();\n\n            this.drawTickValue((this.minValue + i*this.intervalValue).toString(), x2, y2);\n        }\n      },\n      drawTickValue(value, x, y){\n          this.ctx.font = \"10px Arial\";\n          this.ctx.textAlign = \"center\";\n          this.ctx.fillText(value, x, y); \n      },\n      drawMinorTicks(){\n          let num_ticks = (this.maxValue - this.minValue)/this.minorIntervalValue;\n          let angle = Math.PI/2;\n          for (let i = 0; i < num_ticks; i++) {\n            angle = i*2*Math.PI/num_ticks + Math.PI/2;       // THE ANGLE TO MARK.\n            this.ctx.lineWidth = 1;            // HAND WIDTH.\n            this.ctx.beginPath();\n\n            var x1 = (this.canvas.width / 2) + Math.cos(angle) * (this.canvas.height/2);\n            var y1 = (this.canvas.height / 2) + Math.sin(angle) * (this.canvas.height/2);\n            var x2 = (this.canvas.width / 2) + Math.cos(angle) * (this.canvas.height/2 - (this.canvas.height/2 / 7));\n            var y2 = (this.canvas.height / 2) + Math.sin(angle) * (this.canvas.height/2 - (this.canvas.height/2 / 7));\n\n            this.ctx.moveTo(x1, y1);\n            this.ctx.lineTo(x2, y2);\n\n            this.ctx.strokeStyle = '#466B76';\n            this.ctx.stroke();\n        }\n      },\n\n      \n  }\n}\n</script>\n\n<style scoped>\ncanvas{\n    width:auto;\n    height:100%;\n}\n\n\n</style>"],"sourceRoot":""}]}