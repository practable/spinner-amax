{"remainingRequest":"/home/david/practable/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/david/practable/spinner-amax/ui/src/components/Workspace.vue?vue&type=template&id=38d89215&scoped=true","dependencies":[{"path":"/home/david/practable/spinner-amax/ui/src/components/Workspace.vue","mtime":1653472124341},{"path":"/home/david/practable/spinner-amax/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/practable/spinner-amax/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/david/practable/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/david/practable/spinner-amax/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/practable/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgICA8Y2FudmFzIDpjbGFzcz0id29ya3NwYWNlX2NhbnZhc19jbGlja2FibGUgPyAnY2xpY2thYmxlJyA6ICd1bmNsaWNrYWJsZSciIGlkPSJ3b3Jrc3BhY2UiIEBtb3VzZWRvd249ImNoZWNrQ2xpY2siIEBtb3VzZW1vdmU9Im1vdmVDbGlja2VkIiBAbW91c2V1cD0ibW91c2VVbmNsaWNrIj48L2NhbnZhcz4KICAgIDxpbWcgaWQ9InJ1bGVyLWltYWdlIiBzcmM9Ii4uLy4uL3B1YmxpYy9pbWFnZXMvcnVsZXIucG5nIiBoaWRkZW4+CiAgICA8aW1nIGlkPSJwcm90cmFjdG9yIiBzcmM9Ii4uLy4uL3B1YmxpYy9pbWFnZXMvcHJvdHJhY3Rvci5wbmciIGhpZGRlbj4KICAgIAo8L2Rpdj4K"},{"version":3,"sources":["/home/david/practable/spinner-amax/ui/src/components/Workspace.vue"],"names":[],"mappings":";AAGA,CAAC,CAAC,CAAC,CAAC;IACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1K,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAExE,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/david/practable/spinner-amax/ui/src/components/Workspace.vue","sourceRoot":"","sourcesContent":["//Updated for Vue3, removing eventBus $on waiting for addruler/protractor event - now controlled through props from App.vue\n\n<template>\n<div>\n    <canvas :class=\"workspace_canvas_clickable ? 'clickable' : 'unclickable'\" id=\"workspace\" @mousedown=\"checkClick\" @mousemove=\"moveClicked\" @mouseup=\"mouseUnclick\"></canvas>\n    <img id=\"ruler-image\" src=\"../../public/images/ruler.png\" hidden>\n    <img id=\"protractor\" src=\"../../public/images/protractor.png\" hidden>\n    \n</div>\n</template>\n\n<script>\n\nvar canvas;\nvar ctx;\nlet protractor = new Image();\nlet ruler = new Image();\nlet shapes = [];        //the added objects to canvas\n\nexport default {\n    name: \"Workspace\",\n    props:{\n      protractorAdded: Boolean,\n      rulerAdded: Boolean\n  },\n    data(){\n        return{\n            isSelected: false,\n            selected_index: null,\n            selected_offset_x: 0,\n            selected_offset_y: 0,\n            rotateMode: false,\n            workspace_canvas_clickable: true,\n            ruler_width: 800,\n            ruler_height: 80,\n            ruler_video_width_ratio: 1.428,\n            ruler_ratio: 0.1,\n            video_canvas: null,\n        }\n    },\n    created(){\n        \n        let cam_type = this.$store.getters.getCamera;\n        console.log(cam_type);\n        if(cam_type == 0){  //logitech\n            this.ruler_video_width_ratio = 1.29;       //1.428\n        } else{\n            this.ruler_video_width_ratio = 0.77;     //0.7432, 0.8556need to get this ratio check this ratio on final boxes\n        }\n        this.video_canvas = document.getElementById(\"video-canvas\");\n    },\n    mounted(){\n        shapes = [];        //ensure when mounted again that the shapes are not redrawn\n        canvas = document.getElementById(\"workspace\");\n        canvas.width = screen.width;\n        canvas.height = screen.height;\n        ctx = canvas.getContext(\"2d\");\n\n        //add a key press modifiers to the window\n        window.addEventListener('keydown', this.updateMode, false);\n        window.addEventListener('keyup', this.updateMode, false);\n        window.addEventListener('resize', () => {setTimeout(this.resizeRuler, 100)});\n\n        this.resizeRuler();\n    },\n    watch:{\n        protractorAdded(set) {\n            if(set){\n                this.addProtractor();\n            }\n        },\n        rulerAdded(set) {\n            if(set){\n                this.addRuler();\n                //this.$store.dispatch('setAchievementCompleted', 'ruler');\n            }\n        },\n    },\n    methods:{\n        draw() {\n            ctx.clearRect(0,0,screen.width, screen.height);\n\n            for(let i=0; i< shapes.length;i++){\n\n                ctx.save();\n\n                if(shapes[i].image != null){\n                    if(shapes[i].image == ruler){\n                        shapes[i].width = this.ruler_width;\n                        shapes[i].height = this.ruler_height;\n                    } \n                    ctx.translate(shapes[i].x,shapes[i].y);\n                    ctx.translate(shapes[i].width/2, shapes[i].height/2)\n                    ctx.rotate(shapes[i].angle);\n                    //ctx2.drawImage(shapes[i].image, shapes[i].x, shapes[i].y, shapes[i].width, shapes[i].height);\n                    ctx.drawImage(shapes[i].image, -shapes[i].width/2, -shapes[i].height/2, shapes[i].width, shapes[i].height);\n                } \n                else\n                {\n                    // ctx2.clearRect(0,0,screen.width, screen.height);\n                    ctx.beginPath();\n                    ctx.rect(shapes[i].x, shapes[i].y, shapes[i].width, shapes[i].height);\n                    ctx.stroke();\n                    ctx.fill();\n                    ctx.fillStyle = \"#444444\";\n                }\n\n                ctx.restore();\n            }\n\n        },\n        addProtractor(){\n            protractor.onload = function() {\n                let x = 100;\n                let y= 100;\n                let w=400;\n                let h=200;\n                shapes.push( {x:x, y:y, width:w, height:h, image:protractor, angle:0} );\n                ctx.drawImage(protractor, x, y, w, h);\n                \n                \n            };\n            protractor.src = document.getElementById(\"protractor\").src;\n        },\n        addRuler(){\n            let _this = this;\n            ruler.onload = function() {\n                let x = 100;\n                let y= 100;\n                let w = _this.ruler_width;\n                let h = _this.ruler_height;\n                \n                shapes.push( {x:x, y:y, width:w, height:h, image:ruler, angle:0} );\n                ctx.drawImage(ruler, x, y, w, h);\n                \n            };\n\n            ruler.onerror = function(){\n                console.log('no image');\n            }\n            \n            ruler.src = document.getElementById(\"ruler-image\").src;\n        \n        },\n        updateMode(event){\n            if(event.repeat){\n                return;\n            } else{\n                if(event.key == \"o\"){\n                    this.rotateMode = !this.rotateMode;\n                } \n                else if(event.key == \"w\" && event.type == 'keydown'){\n                    console.log(event);\n                    this.workspace_canvas_clickable = !this.workspace_canvas_clickable;\n                }\n            }\n            \n        },\n        checkClick(event){\n            for(let i=0; i<shapes.length;i++){\n\n                let origin = [0,0];\n                let centre = [shapes[i].x + shapes[i].width/2, shapes[i].y + shapes[i].height/2];\n\n                //click position relative to the centre of the shape.\n                let clickPos = [event.offsetX - centre[0], event.offsetY - centre[1]];\n                //let clickPos = [event.offsetX, event.offsetY];\n\n                //from the centre of the shape\n                let vertices = [];\n                let vertex1 = [shapes[i].x - centre[0], shapes[i].y - centre[1]];\n                let vertex2 = [shapes[i].x + shapes[i].width - centre[0], shapes[i].y - centre[1]];\n                let vertex3 = [shapes[i].x + shapes[i].width - centre[0], shapes[i].y + shapes[i].height - centre[1]];\n                let vertex4 = [shapes[i].x - centre[0], shapes[i].y + shapes[i].height - centre[1]];\n                vertices.push(vertex1);\n                vertices.push(vertex2);\n                vertices.push(vertex3);\n                vertices.push(vertex4);\n\n                let angle = shapes[i].angle;\n\n                //rotate the vertices around the centre of the shape\n                for(let i=0;i<4;i++){\n                    let x_prev = vertices[i][0];\n                    let y_prev = vertices[i][1];\n\n                    vertices[i][0] = x_prev*Math.cos(angle) - y_prev*Math.sin(angle);\n                    vertices[i][1] = x_prev*Math.sin(angle) + y_prev*Math.cos(angle);\n                }\n                \n                if(!this.doIntersect(origin,clickPos,vertices[0], vertices[1]) && !this.doIntersect(origin,clickPos,vertices[1], vertices[2]) && !this.doIntersect(origin,clickPos,vertices[2], vertices[3]) && !this.doIntersect(origin,clickPos,vertices[3], vertices[0])){\n                    this.isSelected = true;\n                    this.selected_index = i;\n                    this.selected_offset_x = event.offsetX - shapes[i].x;\n                    this.selected_offset_y = event.offsetY - shapes[i].y;\n                }\n\n            }\n            \n        },\n        // To find orientation of ordered triplet (p, q, r). \n        // The function returns following values \n        // 0 --> p, q and r are colinear \n        // 1 --> Clockwise \n        // 2 --> Counterclockwise \n        checkOrientation(q, p, r){\n            // See https://www.geeksforgeeks.org/orientation-3-ordered-points/ \n                // for details of below formula. \n                let val = (q[1] - p[1]) * (r[0] - q[0]) - \n                        (q[0] - p[0]) * (r[1] - q[1]); \n            \n                if (val == 0) return 0;  // colinear \n            \n                return (val > 0) ? 1: 2; // clock or counterclock wise \n        },\n        doIntersect(p1,q1,p2,q2){\n            let o1 = this.checkOrientation(p1, q1, p2); \n            let o2 = this.checkOrientation(p1, q1, q2); \n            let o3 = this.checkOrientation(p2, q2, p1); \n            let o4 = this.checkOrientation(p2, q2, q1); \n  \n            // General case \n            if (o1 != o2 && o3 != o4) {\n                return true;\n            } else{\n                return false;\n            }\n                 \n        },\n        moveClicked(event){\n            if(this.isSelected){\n                if(this.rotateMode){\n                    if(event.movementY < 0){\n                        shapes[this.selected_index].angle -= Math.PI/180;\n                    } else if(event.movementY > 0){\n                        shapes[this.selected_index].angle += Math.PI/180;\n                    }\n                    \n                } \n                else\n                {\n                    //ctx2.clearRect(rect_top_left_x, rect_top_left_y, rect_width, rect_height);\n                    shapes[this.selected_index].x = event.offsetX - this.selected_offset_x;\n                    shapes[this.selected_index].y = event.offsetY - this.selected_offset_y;\n                \n                }\n                this.draw();        //redraw the shapes only when attempting to move\n            }\n            \n        },\n        mouseUnclick(){\n            this.isSelected = false;\n            this.selected_index = null;\n        },\n        resizeRuler(){\n            console.log('resizing');\n            this.ruler_width = this.video_canvas.clientWidth * this.ruler_video_width_ratio;\n            \n            this.ruler_height = this.ruler_ratio*this.ruler_width;\n             \n            this.draw();\n            \n        },\n    }\n}\n\n\n</script>\n\n<style scoped>\n\n#workspace{\n    z-index: 2;\n    position:absolute;\n    left:0px;\n    top:100px;\n    /* pointer-events: none; */\n}\n\n.unclickable{\n    pointer-events: none;\n    opacity: 0.5;\n}\n\n.clickable{\n    pointer-events: all;\n    opacity: 1;\n}\n\n\n</style>"]}]}