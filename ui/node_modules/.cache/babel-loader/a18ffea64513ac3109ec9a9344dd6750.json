{"remainingRequest":"/home/david/practable/spinner-amax/ui/node_modules/babel-loader/lib/index.js!/home/david/practable/spinner-amax/ui/node_modules/eslint-loader/index.js??ref--14-0!/home/david/practable/spinner-amax/ui/src/modules/dataStore.js","dependencies":[{"path":"/home/david/practable/spinner-amax/ui/src/modules/dataStore.js","mtime":1653472124341},{"path":"/home/david/practable/spinner-amax/ui/babel.config.js","mtime":1653472124337},{"path":"/home/david/practable/spinner-amax/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/practable/spinner-amax/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/david/practable/spinner-amax/ui/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/david/practable/spinner-amax/ui/src/modules/dataStore.js"],"names":["dataStore","state","current_time_array","current_angle_array","current_enc_pos","current_ang_vel_array","moving_avg_array","moving_avg_index","moving_avg_k","moving_avg","start_time","inputMode","graphDataParameter","data","max_data_points","p","i","d","error_array","drive_array","command_array","isRecording","mutations","SET_CURRENT_ENCODER_POSITION","pos","SET_CURRENT_ANGLE_ARRAY","array","SET_CURRENT_ANGULAR_VELOCITY_ARRAY","ADD_PREVIOUS_ANGULAR_VELOCITY","velocity","previous_ang_vels","push","SET_CURRENT_TIME_ARRAY","SET_START_TIME","time","SET_INPUT_MODE","mode","SET_GRAPH_PARAMETER","parameter","ADD_DATA","DELETE_DATA","dataId","splice","CLEAR_ALL_DATA","SET_P","value","SET_I","SET_D","SET_DRIVE_ARRAY","SET_ERROR_ARRAY","SET_COMMAND_ARRAY","SET_IS_RECORDING","set","actions","setCurrentEncoderPosition","context","commit","setCurrentAngleArray","setCurrentAngularVelocityArray","setCurrentTimeArray","setStartTime","setInputMode","setGraphDataParameter","addData","deleteData","clearAllData","setP","setI","setD","setDriveArray","setErrorArray","setCommandArray","setIsRecording","getters","getCurrentEncoderPosition","getCurrentAngle","getCurrentAngleArray","getCurrentAngularVelocity","getCurrentAngularVelocityArray","getCurrentTime","getCurrentTimeArray","getStartTime","getInputMode","getGraphDataParameter","getData","getCurrentPValue","getCurrentIValue","getCurrentDValue","getDrive","getDriveArray","getError","getErrorArray","getCommand","getCommandArray","getIsRecording","getNumData","length","getTime","getTimeArray","times","forEach","index","getMaxTime","time_max","Infinity","t","getMinTime","time_min","getMaxDataPoints","getMaxReached","calculateAverageVelocity","newest","oldest"],"mappings":"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","sourcesContent":["//Store for the data being received from the firmware as well as computed data properties\n\n\nconst dataStore = {\n    state: () => ({\n       //current_time: 0,\n       current_time_array : [0,0,0,0],  // in ms\n        //current_angle: 0,     \n        current_angle_array: [0,0,0,0], //in rad\n        current_enc_pos: 0,\n        //current_ang_vel: 0,   \n        current_ang_vel_array: [0,0,0,0], //in rad/s\n\n        //calculation of simple moving average velocity======\n        moving_avg_array: [0,0,0,0,0],\n        moving_avg_index: 0,\n        moving_avg_k: 5,\n        moving_avg: 0,\n         //==================================================\n        start_time: 0,\n       \n        inputMode: '',\n        graphDataParameter: 'omega',   //'theta'\n        data: [],\n        max_data_points: 5000,\n        p: 0,  \n        i: 0,\n        d: 0,\n        //error: 0,\n        error_array: [0,0,0,0],\n        //drive: 0,\n        drive_array: [0,0,0,0],\n        //command: 0,\n        command_array: [0,0,0,0],\n      //   step:{\n      //      step_time: 0,      //seconds\n      //      step_start: 0,\n      //      step_size: 0\n      //   },\n      //   ramp:{\n      //      ramp_start: 0,\n      //       ramp_gradient: 1,\n      //       ramp_start_time: 0,\n      //       max_voltage: 12,\n      //       max_rad_s: 200,\n      //   },\n      //   pid_parameters:{      //is this necessary\n      //    Kp: 1,\n      //    Ki:0,\n      //    Kd:0,\n      //   },\n        isRecording: false,         //is data actually being recorded\n        \n        \n       }),\n       mutations:{\n         SET_CURRENT_ENCODER_POSITION(state, pos){\n            state.current_enc_pos = pos;\n         },\n         // SET_CURRENT_ANGLE(state, angle){\n         //    state.current_angle = angle;\n         // },\n         SET_CURRENT_ANGLE_ARRAY(state, array){\n            state.current_angle_array = array;\n         },\n         // SET_CURRENT_ANGULAR_VELOCITY(state, velocity){\n         //    state.current_ang_vel = velocity;\n         // },\n         SET_CURRENT_ANGULAR_VELOCITY_ARRAY(state, array){\n            state.current_ang_vel_array = array;\n         },\n         ADD_PREVIOUS_ANGULAR_VELOCITY(state, velocity){\n            state.previous_ang_vels.push(velocity);\n         },\n         // SET_VALUES_IN_AVERAGE(state, num){\n         //    state.values_in_average = num;\n         // },\n         // SET_AVERAGE_COUNT(state, count){\n         //    state.average_count = count;\n         // },\n         // SET_CURRENT_TIME(state, time){\n         //    state.current_time = time;\n         // },\n         SET_CURRENT_TIME_ARRAY(state, array){\n            state.current_time_array = array;\n         },\n         SET_START_TIME(state, time){\n            state.start_time = time;\n         },\n         \n         SET_INPUT_MODE(state, mode){\n            state.inputMode = mode;\n         },\n         SET_GRAPH_PARAMETER(state, parameter){\n            state.graphDataParameter = parameter;\n         },\n         ADD_DATA(state, data){\n            state.data.push(data);\n         },\n         DELETE_DATA (state, dataId) {\n            state.data.splice(dataId, 1);\n         },\n         CLEAR_ALL_DATA(state){\n            state.data = [];\n            //state.data.length = 0; //all references to data are cleared\n         },\n         SET_P(state, value){\n            state.p = value;\n         },\n         SET_I(state, value){\n            state.i = value;\n         },\n         SET_D(state, value){\n            state.d = value;\n         },\n         // SET_DRIVE(state, value){\n         //    state.drive = value;\n         // },\n         SET_DRIVE_ARRAY(state, array){\n            state.drive_array = array;\n         },\n         // SET_ERROR(state, value){\n         //    state.error = value;\n         // },\n         SET_ERROR_ARRAY(state, array){\n            state.error_array = array;\n         },\n         // SET_COMMAND(state, value){\n         //    state.command = value;\n         // },\n         SET_COMMAND_ARRAY(state, array){\n            state.command_array = array;\n         },\n         // SET_STEP(state, step){\n         //    state.step = step;\n         // },\n         // SET_RAMP(state, ramp){\n         //    state.ramp = ramp;\n         // },\n         // SET_PID_PARAMETERS(state, parameters){\n         //    state.pid_parameters = parameters;\n         // },\n         SET_IS_RECORDING(state, set){\n            state.isRecording = set;\n         },\n         \n        \n      //   SET_SHOW_DATA_POINT(state, options){\n      //      console.log('toggling show data point');\n      //       state.data[options.id].showDataPoint = options.show;\n      //   },\n       },\n       actions:{\n         setCurrentEncoderPosition(context, pos){\n            context.commit(\"SET_CURRENT_ENCODER_POSITION\", pos);\n         },\n         // setCurrentAngle(context, angle){\n         //    context.commit(\"SET_CURRENT_ANGLE\", angle);\n         // },\n         setCurrentAngleArray(context, array){\n            context.commit(\"SET_CURRENT_ANGLE_ARRAY\", array);\n         },\n         // setCurrentAngularVelocity(context, velocity){\n         //    context.commit(\"SET_CURRENT_ANGULAR_VELOCITY\", velocity);\n         // },\n         setCurrentAngularVelocityArray(context, array){\n            context.commit(\"SET_CURRENT_ANGULAR_VELOCITY_ARRAY\", array);\n         },\n         // addPreviousAngularVelocity(context, velocity){\n         //    context.commit(\"ADD_PREVIOUS_ANGULAR_VELOCITY\", velocity);\n         // },\n         // setValuesInAverage(context, num){\n         //    context.commit(\"SET_VALUES_IN_AVERAGE\", num);\n         // },\n         // setAverageCount(context, count){\n         //    context.commit(\"SET_AVERAGE_COUNT\", count);\n         // },\n         // setCurrentTime(context, time){\n         //    context.commit(\"SET_CURRENT_TIME\", time);\n         // },\n         setCurrentTimeArray(context, array){\n            context.commit(\"SET_CURRENT_TIME_ARRAY\", array);\n         },\n         setStartTime(context, time){\n            context.commit(\"SET_START_TIME\", time);\n         },\n         \n         setInputMode(context, mode){\n            context.commit(\"SET_INPUT_MODE\", mode);\n         },\n         setGraphDataParameter(context, parameter){\n            context.commit(\"SET_GRAPH_PARAMETER\", parameter);\n         },\n         addData(context, data){\n            context.commit(\"ADD_DATA\", data);\n         },\n         deleteData(context, dataId){\n            context.commit('DELETE_DATA', dataId);\n         },\n         clearAllData(context){\n            context.commit('CLEAR_ALL_DATA');\n         },\n         setP(context, value){\n            context.commit(\"SET_P\", value);\n         },\n         setI(context, value){\n            context.commit(\"SET_I\", value);\n         },\n         setD(context, value){\n            context.commit(\"SET_D\", value);\n         },\n         // setDrive(context, value){\n         //    context.commit(\"SET_DRIVE\", value);\n         // },\n         setDriveArray(context, array){\n            context.commit(\"SET_DRIVE_ARRAY\", array);\n         },\n         // setError(context, value){\n         //    context.commit(\"SET_ERROR\", value);\n         // },\n         setErrorArray(context, array){\n            context.commit(\"SET_ERROR_ARRAY\", array);\n         },\n         // setCommand(context, value){\n         //    context.commit(\"SET_COMMAND\", value);\n         // },\n         setCommandArray(context, array){\n            context.commit(\"SET_COMMAND_ARRAY\", array);\n         },\n         // setStep(context, step){\n         //    context.commit(\"SET_STEP\", step);\n         // },\n         // setRamp(context, ramp){\n         //    context.commit(\"SET_RAMP\", ramp);\n         // },\n         // setPIDParameters(context, parameters){\n         //    context.commit(\"SET_PID_PARAMETERS\", parameters);\n         // },\n         setIsRecording(context, set){\n            context.commit(\"SET_IS_RECORDING\", set);\n         },\n        \n      //   setShowDataPoint(context, options){\n      //       context.commit('SET_SHOW_DATA_POINT', options);\n      //   },\n\n       },\n       getters:{\n         getCurrentEncoderPosition(state){\n            return state.current_enc_pos;\n         },\n         getCurrentAngle(state){\n            return state.current_angle_array[3];      //send the latest value received in the data array\n         },\n         getCurrentAngleArray(state){\n            return state.current_angle_array;\n         },\n         getCurrentAngularVelocity(state){\n            return state.current_ang_vel_array[3];\n         },\n         getCurrentAngularVelocityArray(state){\n            return state.current_ang_vel_array;\n         },\n         // getPreviousAngularVelocities(state){\n         //    return state.previous_ang_vels;\n         // },\n         // getValuesInAverage(state){\n         //    return state.values_in_average;\n         // },\n         // getAverageCount(state){\n         //    return state.average_count;\n         // },\n         getCurrentTime(state){\n            return state.current_time_array[3];\n         },\n         getCurrentTimeArray(state){\n            return state.current_time_array;\n         },\n         getStartTime(state){\n            return state.start_time;\n         },\n         \n         getInputMode(state){\n            return state.inputMode;\n         },\n         getGraphDataParameter(state){\n            return state.graphDataParameter;\n         },\n         getData(state){\n            return state.data;\n         },\n         getCurrentPValue(state){\n            return state.p;\n         },\n         getCurrentIValue(state){\n            return state.i;\n         },\n         getCurrentDValue(state){\n            return state.d;\n         },\n         getDrive(state){\n            return state.drive_array[3];\n         },\n         getDriveArray(state){\n            return state.drive_array;\n         },\n         getError(state){\n            return state.error_array[3];\n         },\n         getErrorArray(state){\n            return state.error_array;\n         },\n         getCommand(state){\n            return state.command_array[3];\n         },\n         getCommandArray(state){\n            return state.command_array;\n         },\n         // getStep(state){\n         //    return state.step;\n         // },\n         // getRamp(state){\n         //    return state.ramp;\n         // },\n         // getPIDParameters(state){\n         //    return state.pid_parameters;\n         // },\n         getIsRecording(state){\n            return state.isRecording;\n         },\n        \n         getNumData(state){\n            return state.data.length;\n        },\n        getTime(state){ \n            if(state.current_time_array[3] - state.start_time >= 0){\n               return (state.current_time_array[3] - state.start_time)/1000;  //in seconds\n            } else{\n               state.start_time = state.current_time_array[3];\n               return 0.0;\n            }\n         },\n         getTimeArray(state){\n            let times = [];\n            state.current_time_array.forEach((value, index) => {\n               times[index] = (value - state.start_time)/1000;\n            })\n\n            return times;\n         },\n         getMaxTime(state){\n            let time_max = -Infinity;\n            state.data.forEach(d => {\n               if(d.t > time_max){\n                  time_max = d.t;\n               }\n            });\n   \n            return time_max;\n         },\n         getMinTime(state){\n            let time_min = Infinity;\n            state.data.forEach(d => {\n               if(d.t < time_min){\n                  time_min = d.t;\n               }\n            });\n   \n            return time_min;\n         },\n         getMaxDataPoints(state){\n            return state.max_data_points;\n         },\n         getMaxReached(state){\n            if(state.data.length >= state.max_data_points){\n               return true;\n            } else {\n               return false;\n            }\n         },\n         calculateAverageVelocity(state){\n            //uses a simple moving average\n            let newest = state.current_ang_vel_array[3];\n            let oldest = state.moving_avg_array[state.moving_avg_index];\n\n            state.moving_avg += (newest - oldest)/state.moving_avg_k;\n\n            state.moving_avg_array[state.moving_avg_index] = state.current_ang_vel_array[3];\n            state.moving_avg_index = (state.moving_avg_index + 1) % state.moving_avg_k;\n\n            return state.moving_avg;\n          },  \n       },  \n  \n  }\n\n  export default dataStore;\n"]}]}