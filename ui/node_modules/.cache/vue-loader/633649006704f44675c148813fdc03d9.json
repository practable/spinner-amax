{"remainingRequest":"/home/david/practable/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/david/practable/spinner-amax/ui/src/components/TableOutput.vue?vue&type=style&index=0&id=9623c622&scoped=true&lang=css","dependencies":[{"path":"/home/david/practable/spinner-amax/ui/src/components/TableOutput.vue","mtime":1653472124341},{"path":"/home/david/practable/spinner-amax/ui/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/practable/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":499162500000},{"path":"/home/david/practable/spinner-amax/ui/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/david/practable/spinner-amax/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/practable/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cgouc2VsZWN0ZWQtcm93ewogICAgYmFja2dyb3VuZC1jb2xvcjogcmVkOwogICAgY29sb3I6IHdoaXRlOwp9CgoudGFibGV7CiAgICBvdmVyZmxvdzogc2Nyb2xsOwogICAgbWF4LWhlaWdodDogNTAwcHg7Cn0K"},{"version":3,"sources":["/home/david/practable/spinner-amax/ui/src/components/TableOutput.vue"],"names":[],"mappings":";;AAiGA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB","file":"/home/david/practable/spinner-amax/ui/src/components/TableOutput.vue","sourceRoot":"","sourcesContent":["//Vue3 updated\n//Orthogonality\n\n<template>\n<div class=\"m-0 bg-white border rounded table\">\n    <div class=\"row justify-content-center\">\n\n    <table v-if='tableData.length != 0' class=\"table\">\n        <tr>\n            <th v-for='heading in tableHeadings' :key=\"heading\" scope=\"col\">{{heading}}</th>\n        </tr>\n        <tr v-for=\"row in tableData\" :id=\"row.id\" :key=\"row.id\" v-bind:class=\"[row.id == selected_row_id ? 'selected-row' : '']\" @click=\"changeSelected(row.id)\">\n            <td v-for='key in Object.keys(row)' :key=\"key\">{{row[key]}}</td>\n            <!-- <td><input type=\"checkbox\" :id=\"row.id\" :name=\"row.id\" :checked='row.showDataPoint' @change=\"toggleShowDataPoint(row.id, row.showDataPoint)\"></td> -->\n        </tr>\n                            \n    </table> \n\n    <table v-else class='table' id='tableData'>\n         <tr>\n            <th v-for='heading in tableHeadings' :key=\"heading\" scope=\"col\">{{heading}}</th>\n        </tr>\n        <tr>\n            <td :colspan=\"tableHeadings.length\"> Data will display once recording complete.</td>\n        </tr>\n    </table>\n\n    </div>\n</div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nexport default {\n    name: 'TableOutput',\n    props:[\n      'tableHeadings', 'selected_point'\n    ],\n    data(){\n        return{\n            tableData: [],\n            searchData:[],\n            search_field:\"\",\n            selected_row_id: \"0\",\n        }\n    },\n    created(){\n        \n    },\n    mounted() {\n        this.updateTable();\n    },\n    computed:{\n        ...mapGetters([\n            'getIsRecording',\n            'getData'\n        ]),\n    },\n    watch:{\n        //to clear data table on reset.\n        getData(data){\n            if(data.length == 0){\n                this.updateTable();\n            }\n        },\n        //to update table once recording complete\n        getIsRecording(now, prev){\n            if(!now && prev){\n                this.updateTable();\n            }\n        },\n        selected_point(id){\n            this.changeSelected(id);\n        }\n    },\n    methods: {\n        updateTable(){\n            this.tableData = [...this.getData];     //get a clone of the data, not set tableData to the getData getter\n        },\n        changeSelected(id){\n            this.selected_row_id = id;\n            var elmnt = document.getElementById(id);\n            elmnt.scrollIntoView(false); \n        },\n        // toggleShowDataPoint(data_id, current_state){\n        //     console.log(current_state);\n        //     this.$store.dispatch('setShowDataPoint',{id: data_id, show: !current_state});\n            \n        // }\n      },\n      \n}\n</script>\n\n<style scoped>\n\n.selected-row{\n    background-color: red;\n    color: white;\n}\n\n.table{\n    overflow: scroll;\n    max-height: 500px;\n}\n</style>\n"]}]}