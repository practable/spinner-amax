{"remainingRequest":"/home/david/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/david/spinner-amax/ui/src/components/Clock.vue?vue&type=template&id=91e9dde4&scoped=true","dependencies":[{"path":"/home/david/spinner-amax/ui/src/components/Clock.vue","mtime":1653472124341},{"path":"/home/david/spinner-amax/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/spinner-amax/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/david/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/david/spinner-amax/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8ZGl2IGNsYXNzPSd0ZXh0LWRhcmsnIGlkPSdzZXNzaW9uVGltZSc+IFNlc3Npb24gZW5kcyBpbjoge3tjdXJyZW50X3RpbWVfbGVmdH19PC9kaXY+Cg=="},{"version":3,"sources":["/home/david/spinner-amax/ui/src/components/Clock.vue"],"names":[],"mappings":";IAGI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/david/spinner-amax/ui/src/components/Clock.vue","sourceRoot":"","sourcesContent":["//Vue3 update\n\n<template>\n    <div class='text-dark' id='sessionTime'> Session ends in: {{current_time_left}}</div>\n</template>\n\n<script>\n\nexport default {\n\n  name: 'Clock',\n  data () {\n    return {\n        current_time: '',           //in clock format\n        current_time_left: '',      //in minutes and seconds\n        interval_id: 0,\n    }\n  },\n  components: {\n    \n  },\n  computed:{\n      sessionEndTime(){\n          let date = new Date(this.$store.getters.getExpiryTime*1000);\n          return this.getTime(date);\n      }\n  },\n  watch:{\n      \n  },\n  created(){\n      \n  },\n  mounted(){\n      this.interval_id = setInterval(() => {\n          this.updateClock() \n      }, 1000);\n\n  },\n  methods: {\n      addZeroes(value){\n          if(value < 10){\n              return \"0\" + value;\n          } else {\n              return value;\n          }\n      },\n      updateClock(){\n          //get the new date\n          let date = new Date();\n          //use this to get time in format hh:mm:ss\n          this.current_time = this.getTime(date);\n          //get the time left to go in mm:ss\n          this.current_time_left = this.getTimeLeft(date);\n      },\n      getTime(date){\n          \n          let hour = date.getHours();\n          let min = date.getMinutes();\n          let sec = date.getSeconds();\n\n          hour = this.addZeroes(hour);\n          min = this.addZeroes(min);\n          sec = this.addZeroes(sec);\n\n          return hour + \":\" + min + \":\" + sec;\n      },\n      getTimeLeft(date){\n          let interval = this.$store.getters.getExpiryTime*1000 - date.getTime();       //in milliseconds\n          let seconds = interval / 1000.0;\n          let minutes = Math.floor(seconds/60);     //number of full minutes\n          seconds = Math.floor(seconds % 60);               //remaining seconds\n\n          minutes = this.addZeroes(minutes);\n          seconds = this.addZeroes(seconds);\n\n          if(interval > 0){\n              return minutes + \" min : \" + seconds + \" secs\"; \n          } else {\n              this.$store.dispatch('setSessionExpired', true);\n              clearInterval(this.interval_id);\n              return 'ENDED'\n          }\n          \n      }\n      \n  }\n}\n</script>\n\n<style scoped>\n#sessionTime{\n    font-style: italic;\n    color: white;\n}\n\n</style>"]}]}