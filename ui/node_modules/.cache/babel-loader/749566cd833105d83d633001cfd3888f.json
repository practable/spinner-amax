{"remainingRequest":"/home/david/spinner-amax/ui/node_modules/thread-loader/dist/cjs.js!/home/david/spinner-amax/ui/node_modules/babel-loader/lib/index.js!/home/david/spinner-amax/ui/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/david/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/david/spinner-amax/ui/src/components/TableOutput.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/david/spinner-amax/ui/src/components/TableOutput.vue","mtime":1653472124341},{"path":"/home/david/spinner-amax/ui/babel.config.js","mtime":1653472124337},{"path":"/home/david/spinner-amax/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/spinner-amax/ui/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/spinner-amax/ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/david/spinner-amax/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvaG9tZS9kYXZpZC9zcGlubmVyLWFtYXgvdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5IjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL2hvbWUvZGF2aWQvc3Bpbm5lci1hbWF4L3VpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0IHsgbWFwR2V0dGVycyB9IGZyb20gJ3Z1ZXgnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ1RhYmxlT3V0cHV0JywKICBwcm9wczogWyd0YWJsZUhlYWRpbmdzJywgJ3NlbGVjdGVkX3BvaW50J10sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHRhYmxlRGF0YTogW10sCiAgICAgIHNlYXJjaERhdGE6IFtdLAogICAgICBzZWFyY2hfZmllbGQ6ICIiLAogICAgICBzZWxlY3RlZF9yb3dfaWQ6ICIwIgogICAgfTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7fSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy51cGRhdGVUYWJsZSgpOwogIH0sCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoe30sIG1hcEdldHRlcnMoWydnZXRJc1JlY29yZGluZycsICdnZXREYXRhJ10pKSwKICB3YXRjaDogewogICAgLy90byBjbGVhciBkYXRhIHRhYmxlIG9uIHJlc2V0LgogICAgZ2V0RGF0YTogZnVuY3Rpb24gZ2V0RGF0YShkYXRhKSB7CiAgICAgIGlmIChkYXRhLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgdGhpcy51cGRhdGVUYWJsZSgpOwogICAgICB9CiAgICB9LAogICAgLy90byB1cGRhdGUgdGFibGUgb25jZSByZWNvcmRpbmcgY29tcGxldGUKICAgIGdldElzUmVjb3JkaW5nOiBmdW5jdGlvbiBnZXRJc1JlY29yZGluZyhub3csIHByZXYpIHsKICAgICAgaWYgKCFub3cgJiYgcHJldikgewogICAgICAgIHRoaXMudXBkYXRlVGFibGUoKTsKICAgICAgfQogICAgfSwKICAgIHNlbGVjdGVkX3BvaW50OiBmdW5jdGlvbiBzZWxlY3RlZF9wb2ludChpZCkgewogICAgICB0aGlzLmNoYW5nZVNlbGVjdGVkKGlkKTsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIHVwZGF0ZVRhYmxlOiBmdW5jdGlvbiB1cGRhdGVUYWJsZSgpIHsKICAgICAgdGhpcy50YWJsZURhdGEgPSBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5nZXREYXRhKTsgLy9nZXQgYSBjbG9uZSBvZiB0aGUgZGF0YSwgbm90IHNldCB0YWJsZURhdGEgdG8gdGhlIGdldERhdGEgZ2V0dGVyCiAgICB9LAogICAgY2hhbmdlU2VsZWN0ZWQ6IGZ1bmN0aW9uIGNoYW5nZVNlbGVjdGVkKGlkKSB7CiAgICAgIHRoaXMuc2VsZWN0ZWRfcm93X2lkID0gaWQ7CiAgICAgIHZhciBlbG1udCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTsKICAgICAgZWxtbnQuc2Nyb2xsSW50b1ZpZXcoZmFsc2UpOwogICAgfSAvLyB0b2dnbGVTaG93RGF0YVBvaW50KGRhdGFfaWQsIGN1cnJlbnRfc3RhdGUpewogICAgLy8gICAgIGNvbnNvbGUubG9nKGN1cnJlbnRfc3RhdGUpOwogICAgLy8gICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdzZXRTaG93RGF0YVBvaW50Jyx7aWQ6IGRhdGFfaWQsIHNob3c6ICFjdXJyZW50X3N0YXRlfSk7CiAgICAvLyB9CgogIH0KfTs="},{"version":3,"sources":["/home/david/spinner-amax/ui/src/components/TableOutput.vue"],"names":[],"mappings":";;AAgCA,SAAS,UAAT,QAA2B,MAA3B;AAEA,eAAe;AACX,EAAA,IAAI,EAAE,aADK;AAEX,EAAA,KAAK,EAAC,CACJ,eADI,EACa,gBADb,CAFK;AAKX,EAAA,IALW,kBAKL;AACF,WAAM;AACF,MAAA,SAAS,EAAE,EADT;AAEF,MAAA,UAAU,EAAC,EAFT;AAGF,MAAA,YAAY,EAAC,EAHX;AAIF,MAAA,eAAe,EAAE;AAJf,KAAN;AAMH,GAZU;AAaX,EAAA,OAbW,qBAaF,CAER,CAfU;AAgBX,EAAA,OAhBW,qBAgBD;AACN,SAAK,WAAL;AACH,GAlBU;AAmBX,EAAA,QAAQ,oBACD,UAAU,CAAC,CACV,gBADU,EAEV,SAFU,CAAD,CADT,CAnBG;AAyBX,EAAA,KAAK,EAAC;AACF;AACA,IAAA,OAFE,mBAEM,IAFN,EAEW;AACT,UAAG,IAAI,CAAC,MAAL,IAAe,CAAlB,EAAoB;AAChB,aAAK,WAAL;AACJ;AACH,KANC;AAOF;AACA,IAAA,cARE,0BAQa,GARb,EAQkB,IARlB,EAQuB;AACrB,UAAG,CAAC,GAAD,IAAQ,IAAX,EAAgB;AACZ,aAAK,WAAL;AACJ;AACH,KAZC;AAaF,IAAA,cAbE,0BAaa,EAbb,EAagB;AACd,WAAK,cAAL,CAAoB,EAApB;AACJ;AAfE,GAzBK;AA0CX,EAAA,OAAO,EAAE;AACL,IAAA,WADK,yBACQ;AACT,WAAK,SAAL,sBAAqB,KAAK,OAA1B,EADS,CAC+B;AAC3C,KAHI;AAIL,IAAA,cAJK,0BAIU,EAJV,EAIa;AACd,WAAK,eAAL,GAAuB,EAAvB;AACA,UAAI,KAAI,GAAI,QAAQ,CAAC,cAAT,CAAwB,EAAxB,CAAZ;AACA,MAAA,KAAK,CAAC,cAAN,CAAqB,KAArB;AACH,KARI,CASL;AACA;AACA;AAEA;;AAbK;AA1CE,CAAf","sourcesContent":["//Vue3 updated\n//Orthogonality\n\n<template>\n<div class=\"m-0 bg-white border rounded table\">\n    <div class=\"row justify-content-center\">\n\n    <table v-if='tableData.length != 0' class=\"table\">\n        <tr>\n            <th v-for='heading in tableHeadings' :key=\"heading\" scope=\"col\">{{heading}}</th>\n        </tr>\n        <tr v-for=\"row in tableData\" :id=\"row.id\" :key=\"row.id\" v-bind:class=\"[row.id == selected_row_id ? 'selected-row' : '']\" @click=\"changeSelected(row.id)\">\n            <td v-for='key in Object.keys(row)' :key=\"key\">{{row[key]}}</td>\n            <!-- <td><input type=\"checkbox\" :id=\"row.id\" :name=\"row.id\" :checked='row.showDataPoint' @change=\"toggleShowDataPoint(row.id, row.showDataPoint)\"></td> -->\n        </tr>\n                            \n    </table> \n\n    <table v-else class='table' id='tableData'>\n         <tr>\n            <th v-for='heading in tableHeadings' :key=\"heading\" scope=\"col\">{{heading}}</th>\n        </tr>\n        <tr>\n            <td :colspan=\"tableHeadings.length\"> Data will display once recording complete.</td>\n        </tr>\n    </table>\n\n    </div>\n</div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nexport default {\n    name: 'TableOutput',\n    props:[\n      'tableHeadings', 'selected_point'\n    ],\n    data(){\n        return{\n            tableData: [],\n            searchData:[],\n            search_field:\"\",\n            selected_row_id: \"0\",\n        }\n    },\n    created(){\n        \n    },\n    mounted() {\n        this.updateTable();\n    },\n    computed:{\n        ...mapGetters([\n            'getIsRecording',\n            'getData'\n        ]),\n    },\n    watch:{\n        //to clear data table on reset.\n        getData(data){\n            if(data.length == 0){\n                this.updateTable();\n            }\n        },\n        //to update table once recording complete\n        getIsRecording(now, prev){\n            if(!now && prev){\n                this.updateTable();\n            }\n        },\n        selected_point(id){\n            this.changeSelected(id);\n        }\n    },\n    methods: {\n        updateTable(){\n            this.tableData = [...this.getData];     //get a clone of the data, not set tableData to the getData getter\n        },\n        changeSelected(id){\n            this.selected_row_id = id;\n            var elmnt = document.getElementById(id);\n            elmnt.scrollIntoView(false); \n        },\n        // toggleShowDataPoint(data_id, current_state){\n        //     console.log(current_state);\n        //     this.$store.dispatch('setShowDataPoint',{id: data_id, show: !current_state});\n            \n        // }\n      },\n      \n}\n</script>\n\n<style scoped>\n\n.selected-row{\n    background-color: red;\n    color: white;\n}\n\n.table{\n    overflow: scroll;\n    max-height: 500px;\n}\n</style>\n"],"sourceRoot":""}]}