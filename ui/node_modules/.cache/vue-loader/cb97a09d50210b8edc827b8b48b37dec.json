{"remainingRequest":"/home/david/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/david/spinner-amax/ui/src/components/StepCommand.vue?vue&type=style&index=0&id=2c0a295f&scoped=true&lang=css","dependencies":[{"path":"/home/david/spinner-amax/ui/src/components/StepCommand.vue","mtime":1654598722911},{"path":"/home/david/spinner-amax/ui/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":499162500000},{"path":"/home/david/spinner-amax/ui/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/david/spinner-amax/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/spinner-amax/ui/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmlucHV0ewogICAgbWluLXdpZHRoOiAyMCU7CiAgICBtYXgtd2lkdGg6IDUwJTsKfQouZXJyb3J7CiAgICAvKiBib3JkZXI6dGhpY2sgc29saWQgcmVkICovCiAgICBib3JkZXI6IGF1dG87Cn0KCi5lcnJvcjpmb2N1c3sKICAgIC8qIGJvcmRlcjp0aGljayBzb2xpZCByZWQgKi8KICAgIGJvcmRlcjogYXV0bzsKfQoKI3J1biAgICAgICB7YmFja2dyb3VuZC1jb2xvcjogIHJnYig3NCwgMjIzLCAzNyk7fQojcnVuOmhvdmVyIHtiYWNrZ3JvdW5kLWNvbG9yOiAjMGI3ZTBmfSAKI3dhaXQgICAgICAge2JhY2tncm91bmQtY29sb3I6ICByZ2IoMjU1LCAzMCwgMCk7fQojd2FpdDpob3ZlciB7YmFja2dyb3VuZC1jb2xvcjogIzUyMDMwM30gCgoK"},{"version":3,"sources":["/home/david/spinner-amax/ui/src/components/StepCommand.vue"],"names":[],"mappings":";AAmIA,CAAC,CAAC,CAAC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAClB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACF,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;IAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAChB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACR,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;IAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAChB;;AAEA,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/david/spinner-amax/ui/src/components/StepCommand.vue","sourceRoot":"","sourcesContent":["//vue3 update\n\n<template>\n        \n        <div class=\"row d-flex justify-content-center m-4\" @mousedown=\"setDraggable(false)\" @mouseup=\"setDraggable(true)\">  \n            <div class='col-auto'>\n                <div class='input-group' v-if='mode == \"speedRaw\"'>\n                    <span class='input-group-text' for=\"step_raw\">Step size ({{-max_voltage_step}} to {{max_voltage_step}}V)</span>\n                    <input type=\"number\" :max='max_voltage_step' :min='-max_voltage_step' :class=\"(parseFloat(step_size) >= -max_voltage_step && parseFloat(step_size) <= max_voltage_step) ? 'form-control' : 'form-control is-invalid'\" id=\"step_raw\" v-model=\"step_size\">\n                    <button class='btn btn-lg' id=\"run\" @click=\"runStep(); this.$store.dispatch('setAchievementCompleted', 'speedRaw-step-input')\" :disabled='Math.abs(step_size) > max_voltage_step'>Run</button>\n                    <button class='btn btn-lg btn-danger' v-if='isStepRunning' id=\"wait\" @click=\"stopStep\">Stop</button>\n                </div>\n            \n\n                <div class='input-group' v-else-if='mode == \"speedPid\"'>\n                    <span class='input-group-text' for=\"step_speed\">Step size (0 - {{max_speed_step}} rad/s)</span>\n                    <input type=\"number\" :max='max_speed_step' :min='-max_speed_step' :class=\"(parseFloat(step_size) >= -max_speed_step && parseFloat(step_size) <= max_speed_step) ? 'form-control' : 'form-control is-invalid'\" id=\"step_speed\" v-model=\"step_size\">\n                    <button class='btn btn-lg' id=\"run\" @click=\"runStep\" :disabled='Math.abs(step_size) > max_speed_step'>Run</button>\n                    <button class='btn btn-lg btn-danger' v-if='isStepRunning' id=\"wait\" @click=\"stopStep\">Stop</button>\n                </div>\n\n                <div class='input-group' v-else-if='mode == \"positionPid\"'>\n                    <span class='input-group-text' for=\"step_speed\">Step size (0 - {{max_position_step.toFixed(2)}} rad)</span>\n                    <input type=\"number\" step='0.01' :max='max_position_step.toFixed(2)' :min='-max_position_step.toFixed(2)' :class=\"(parseFloat(step_size) >= -max_position_step && parseFloat(step_size) <= max_position_step) ? 'form-control' : 'form-control is-invalid'\" id=\"step_position\" v-model=\"step_size\" >\n                    <button class='btn btn-lg' v-if='!isStepRunning' id=\"run\" @click=\"runStep(); this.$store.dispatch('checkPIDControllerConditions')\">Run</button>\n                    <button class='btn btn-lg btn-danger' v-else-if='isStepRunning' id=\"wait\" @click=\"stopStep\">Stop</button>\n                </div>\n\n            </div>\n        </div>\n       \n</template>\n\n<script>\nimport { mapActions } from 'vuex';\n\nexport default {\n\n  name: 'StepCommand',\n  props:{\n      mode: String,\n  },\n  emits:['showinputtype'],\n  data () {\n    return {\n        step_size: 0.00,            \n        max_position_step: 6, \n        max_speed_step: 100,\n        max_voltage_step: 6,\n        isStepRunning: false,\n    }\n  },\n  created(){\n      let version = this.$store.getters.getRemoteLabVersion;\n        if( version == 'variable_governor'){\n            this.max_position_step = Math.PI;             //variable governor can spin full circle\n        } else if(version == 'robot_arm'){\n            this.max_position_step = 3*Math.PI/10;          //robot arm is soft limited to 300 encoder steps from 0.\n        }\n\t},\n  methods: {\n      ...mapActions([\n          'setDraggable'\n      ]),\n     runStep(){\n         if(this.$store.getters.getIsDataRecorderOn){\n                 this.$store.dispatch('setIsRecording', true);\n             }\n\n         this.$emit('showinputtype', false);\n         \n        //  let step = {\n        //      step_time: this.time_to_step,\n        //      step_start: 0,\n        //      step_size: this.step_size\n        //  }\n        //  this.$store.dispatch('setStep', step);\n         \n        this.sendCommand();\n             \n     },\n     sendCommand(){\n         if(this.mode == 'speedRaw'){\n             \n             this.isStepRunning = true; \n             let signal = parseFloat(this.step_size);\n             this.$store.dispatch('setVoltage', signal);\n\n         } else if(this.mode == 'positionPid'){\n\n             this.isStepRunning = true;                      //NEW !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n             let new_ang_rad = this.$store.getters.getCurrentAngle + parseFloat(this.step_size);\n             this.$store.dispatch('setPosition', new_ang_rad);\n\n         } else if(this.mode == 'speedPid'){\n\n             this.isStepRunning = true; \n             let rad_s = this.$store.getters.getCurrentAngularVelocity + parseFloat(this.step_size);           //needs to be in rad/s\n             this.$store.dispatch('setSpeed', rad_s);\n\n         }\n\n         \n         this.$store.dispatch('addMultipleAchievement','multiple-runs');\n         \n     },\n     stopStep(){\n            //this is an internal mode in the firmware and does not need to be reflected in the UI.\n            this.isStepRunning = false;\t\t\t\t//NEW !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t\n            this.$emit('showinputtype', true);\n\n            if(this.$store.getters.getIsRecording){\n                 this.$store.dispatch('setIsRecording', false);\n             }\n\n            if(this.mode == 'positionPid'){\n                this.$store.dispatch('wait');\n            } else if(this.mode == 'speedRaw'){\n                this.$store.dispatch('setVoltage', 0);\n            } else {\n                this.$store.dispatch('wait');\n            }\n             \n\t\t},\n     \n  }\n}\n</script>\n\n<style scoped>\ninput{\n    min-width: 20%;\n    max-width: 50%;\n}\n.error{\n    /* border:thick solid red */\n    border: auto;\n}\n\n.error:focus{\n    /* border:thick solid red */\n    border: auto;\n}\n\n#run       {background-color:  rgb(74, 223, 37);}\n#run:hover {background-color: #0b7e0f} \n#wait       {background-color:  rgb(255, 30, 0);}\n#wait:hover {background-color: #520303} \n\n\n</style>"]}]}